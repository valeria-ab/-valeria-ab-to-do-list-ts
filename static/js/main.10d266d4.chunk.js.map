{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","getNewTitle","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","style","listStyle","paddingLeft","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","removeTask","textAlign","ButtonGroup","size","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","taskID","tl","todoListID","todoList","todolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","newTodoListID","newTodoList","spacing","allTodolistTasks","tasksForTodolist","item","Paper","elevation","borderRadius","square","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.10d266d4.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {Button, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        let trimmedTitle = title.trim();\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n    return <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={'Title'}\r\n            error={!!error} //---не понятно\r\n            helperText={error}\r\n        />\r\n    {/*<input value={title}\r\n           onChange={onChangeHandler}\r\n           onKeyPress={onKeyPressHandler}\r\n           className={error ? \"error\" : \"\"}\r\n    />*/}\r\n   {/* <button onClick={addItem}>+</button>*/}\r\n   <IconButton  color={\"primary\"}\r\n                onClick={addItem}>\r\n<AddBox/>\r\n   </IconButton>\r\n   {/*<Button\r\n       variant={\"contained\"}\r\n       color={\"primary\"}\r\n       onClick={addItem}\r\n   >+</Button>*/}\r\n\r\n\r\n {/*   {error && <div className=\"error-message\">{error}</div>}*/}\r\n</div>\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    getNewTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n\r\n    const onEditMode = () => {setEditMode(true)}\r\n    const offEditMode = () => {setEditMode(false)\r\n    if(title.trim()) {\r\n        props.getNewTitle(title.trim())\r\n    }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n            // variant={'outlined'}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n            />\r\n           /* ?<input\r\n            value={title}\r\n            onBlur={offEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n            />*/\r\n        : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n    )\r\n}\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, ButtonGroup, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskID: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} getNewTitle={changeTodolistTitle}/>\r\n            {/*  <button onClick={removeTodolist}>x</button>*/}\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const changeTaskTitle = (title: string) => {\r\n                        props.changeTaskTitle(t.id, title, props.id)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <Checkbox\r\n                            color={'primary'}\r\n                            onChange={onChangeHandler}\r\n                            checked={t.isDone}\r\n                        />\r\n                        {/* <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                        <EditableSpan value={t.title} getNewTitle={changeTaskTitle}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n\r\n                        {/*   <button onClick={onClickHandler}>x</button>*/}\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div style={{textAlign: 'center'}}>\r\n            <ButtonGroup size={'small'} color={\"primary\"}>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeTaskTitle(taskID: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolists([...todolists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n    function changeTodolistTitle(todoListID: string, title: string) {\r\n        const todoList = todolists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container={true} style={{padding: '15px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === 'active') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper elevation={10} style={{padding: \"15px\", borderRadius: '15px'}} square={false}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                        }\r\n\r\n                        </Grid>\r\n\r\n                        </Container>\r\n\r\n                        </div>\r\n                        );\r\n                    }\r\n\r\n                    export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}